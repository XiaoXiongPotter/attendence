// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hangsheng.kaoqin.repository;

import com.hangsheng.kaoqin.domain.Attendance;
import com.hangsheng.kaoqin.domain.AttendanceSignInAndSignOutFormBean;
import com.hangsheng.kaoqin.domain.QAttendance;
import com.hangsheng.kaoqin.repository.AttendanceRepositoryCustom;
import com.hangsheng.kaoqin.repository.AttendanceRepositoryImpl;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AttendanceRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: AttendanceRepositoryImpl implements AttendanceRepositoryCustom;
    
    declare @type: AttendanceRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AttendanceRepositoryImpl.SIGN_IN = "signIn";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AttendanceRepositoryImpl.SIGN_OUT = "signOut";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AttendanceRepositoryImpl.IP = "ip";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AttendanceRepositoryImpl.STAFF = "staff";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Attendance> AttendanceRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QAttendance attendance = QAttendance.attendance;
        
        JPQLQuery<Attendance> query = from(attendance);
        
        Path<?>[] paths = new Path<?>[] {attendance.signIn,attendance.signOut,attendance.ip,attendance.staff};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SIGN_IN, attendance.signIn)
			.map(SIGN_OUT, attendance.signOut)
			.map(IP, attendance.ip)
			.map(STAFF, attendance.staff);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, attendance);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Attendance> AttendanceRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QAttendance attendance = QAttendance.attendance;
        
        JPQLQuery<Attendance> query = from(attendance);
        
        Path<?>[] paths = new Path<?>[] {attendance.signIn,attendance.signOut,attendance.ip,attendance.staff};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(attendance.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SIGN_IN, attendance.signIn)
			.map(SIGN_OUT, attendance.signOut)
			.map(IP, attendance.ip)
			.map(STAFF, attendance.staff);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, attendance);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Attendance> AttendanceRepositoryImpl.findBySignInAfterAndSignOutBefore(AttendanceSignInAndSignOutFormBean formBean, GlobalSearch globalSearch, Pageable pageable) {
        
        QAttendance attendance = QAttendance.attendance;
        
        JPQLQuery<Attendance> query = from(attendance);
        
        if (formBean != null) {
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getSignIn() != null) {
                        searchCondition.and(attendance.signIn.eq(formBean.getSignIn()));
                }
                if (formBean.getSignOut() != null) {
                        searchCondition.and(attendance.signOut.eq(formBean.getSignOut()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        }
        
        Path<?>[] paths = new Path<?>[] {attendance.signIn,attendance.signOut,attendance.ip,attendance.staff};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(SIGN_IN, attendance.signIn)
			.map(SIGN_OUT, attendance.signOut)
			.map(IP, attendance.ip)
			.map(STAFF, attendance.staff);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, attendance);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long AttendanceRepositoryImpl.countBySignInAfterAndSignOutBefore(AttendanceSignInAndSignOutFormBean formBean) {
        
        QAttendance attendance = QAttendance.attendance;
        
        JPQLQuery<Attendance> query = from(attendance);
        
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getSignIn() != null) {
                        searchCondition.and(attendance.signIn.eq(formBean.getSignIn()));
                }
                if (formBean.getSignOut() != null) {
                        searchCondition.and(attendance.signOut.eq(formBean.getSignOut()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        return query.fetchCount();
    }
    
}
