// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hangsheng.kaoqin.repository;

import com.hangsheng.kaoqin.domain.QStaff;
import com.hangsheng.kaoqin.domain.Staff;
import com.hangsheng.kaoqin.repository.StaffRepositoryCustom;
import com.hangsheng.kaoqin.repository.StaffRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect StaffRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: StaffRepositoryImpl implements StaffRepositoryCustom;
    
    declare @type: StaffRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StaffRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StaffRepositoryImpl.MAC = "mac";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StaffRepositoryImpl.MOBILE = "mobile";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Staff> StaffRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QStaff staff = QStaff.staff;
        
        JPQLQuery<Staff> query = from(staff);
        
        Path<?>[] paths = new Path<?>[] {staff.name,staff.mac,staff.mobile};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, staff.name)
			.map(MAC, staff.mac)
			.map(MOBILE, staff.mobile);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, staff);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Staff> StaffRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QStaff staff = QStaff.staff;
        
        JPQLQuery<Staff> query = from(staff);
        
        Path<?>[] paths = new Path<?>[] {staff.name,staff.mac,staff.mobile};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(staff.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, staff.name)
			.map(MAC, staff.mac)
			.map(MOBILE, staff.mobile);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, staff);
    }
    
}
